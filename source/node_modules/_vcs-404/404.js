'use strict'
/******************************************************************************
  STACK BASE
******************************************************************************/
var { h, hsvg } = require('_h')
var s           = require('_s')
/******************************************************************************
  STACK EXTEND
******************************************************************************/
var defined     = require('defined')
/******************************************************************************
  MAIN
******************************************************************************/
module.exports = NotFoundComponent

function NotFoundComponent (db, engine) {


  /*****************************/
  // THEME + LOCAL CACHE + DEFAULT VALUES
  var STATUS = {
    error: undefined
  }

  /*****************************/
  // INITIALIZE STYLING
  var style1 = {
    display: 'flex',
    flexDirection: 'column',
    color: 'white',
    fontFamily: 'arial',
    width: '100%',
    minHeight: '100%',
    fontSize: '1.5vmin',
    alignItems: 'center',
    justifyContent: 'flex-start',
    backgroundColor: 'red'
  }
  var style2 = {
    fontSize: '1.5vmin',
    backgroundColor:'white',
    borderRadius:'50px',
    minWidth: '600px',
    padding: '20px',
    width: '50%',
    height: '50%'
  }
  var style3 = { fontSize: '1.5vmin', boxSizing: 'border-box' }
  var sh = { style: { color: 'white', padding: '20px' } }
  var styleError = {
    backgroundColor: 'white',
    color: 'red',
    padding: '15px'
  }
  var props = {
    style: style3,
    width:'100%',
    height:'100%',
    frameBorder:'0',
    src: 'https://gitter.im/wizardamigosinstitute/chat/~embed'
  }


  /*****************************/
  // CHILD COMPONENTS & USED MODULES
  // ...


  /*****************************/
  // RENDER COMPONENT
  function render404 (error, update) {
    // TRIGGERS
    // either render404(error || undefined)
    // or db.put('ERROR')
    if (error) db.put('ERROR', e, function noop () {})
    else {
      // RENDER
      var vtree = h('div', { style: style1 }, [
        h('h1', sh, 'Something went wrong'),
        h('h2', sh, 'Please tell us about it in the chat so we can fix it :D'),
        h('div', { style: style2 }, [
          h('iframe', props)
        ]),
        h('br'),
        h('span', { style: { fontWeight: 'bold' } }, [
          'Please copy <ctrl-c> & paste <ctrl-v> the error below to the chat'
        ]),
        h('xmp', { style: styleError, onclick: onclick }, STATUS.error)
      ])
      // PUSH UPDATE
      engine.push({
        type: 'vtree',
        key: 'notFound',
        value: vtree
      })
    }
  }


  /*****************************/
  // INCOMING COMMUNICATION CHANNELS
  db.on('put', function (key, value) {
    try { value = JSON.parse(value) } catch (e) { value = defined(value, {}) }

    // @TODO: maybe value should be an array of ERRORS or better
    //        this shoud listen to a RANGE of ERRORS since the last error
    // should be configurable how many errors to log
    if (key === 'ERROR') {
      // @TODO: log the error to a backend
      // value = JSON.stringify({
      //   name: error.name, message: error.message, stack: error.stack
      // }, null, 2)
      var error = value ? value : new Error('404 - not found')
      var e = JSON.stringify({
        name: error.name,
        route: window.location.href, // db.get('target'???)
        message: error.message,
        stack: error.stack
      }, null, 2)
      STATUS.error = '#### Error\n' + printError(e)
      render404()
    }
  })


  /*****************************/
  // INITIALIZE
  console.log('--------------------------------')
  console.log('INITIALIZE: notFound:404() component')
  console.log('--------------------------------')
  // @TODO currently only used by raynos routes module
  return render404


  /*****************************/
  // HELPER
  function onclick (event) {
    try {
      var range = document.createRange()
      range.selectNode(event.target)
      window.getSelection().addRange(range);
      document.execCommand('copy')
    }
    catch (err) { console.error('Oops, unable to copy2clipboard') }
  }
  function printError (value) {
    value = JSON.stringify(JSON.parse(value), null, 2)
    var v = ['```js']
    value.split('\n').forEach(function (line) {
      line = [].concat(line.split('\\n'))
      if (line.length > 1)
        line.forEach(function (l,i) {
          // if (i===0) v.push('  ' + l + '"')
          if (i===0) v.push('  ' + l.split('": "').join('": " [\n      "') + '",')
          else if (i===line.length-1) v.push('      "' + l + '\n    ]')
          else v.push('      "' + l + '",')
        })
      else v.push('  ' + line)
    })
    v.push('```')
    return v.join('\n')
  }
}
