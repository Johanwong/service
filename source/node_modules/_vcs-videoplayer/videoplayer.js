'use strict'
/******************************************************************************
  STACK BASE
******************************************************************************/
const { h, hsvg } = require('_h')
const s           = require('_s')
var bel           = require('bel')
/******************************************************************************
  MAIN

  // @TODO: put video component into normal vcs component format

******************************************************************************/
module.exports = videoplayer

var x = s(`
  player {
    height: 100%;
    width : 100%;
    border: 10px solid green;
  }
  video {
    width: 100%;
    height: 100%;
    border: 0;
  }
`)

var initialized = false
var VIDEOS = []
window.onYouTubeIframeAPIReady = function () {
  initialized = true
  for(var fn; fn = VIDEOS.shift(); fn()) {}
}

function videoplayer (opts, callback) {
  return h('div', {
    className : x('video'),
    hook      : function (el) { init(el, callback) }
  })
}

var firstInit = false // crazy hook hack to avoid weired double execution
var counter = 1

function init (container, callback) {
  if (!counter) return counter++
  if (firstInit && !counter) return
  firstInit = true
  counter = 0

  document.body.appendChild(bel`
    <script id="youtube" src="https://www.youtube.com/iframe_api"></script>
  `)
  if (!initialized) return VIDEOS.push(makeVideo)
  else makeVideo()
  function makeVideo () {
    // ## Live Configuration Preview - API explorer
    // https://developers.google.com/youtube/youtube_player_demo
    // ## Youtube parameters - append arguments as url params
    // https://developers.google.com/youtube/player_parameters
    var playerAPI = new YT.Player(container, {
      // https://www.youtube.com/embed?listType=playlist&list=PL{{PLAYLIST_ID}}
      // https://www.youtube.com/embed/{{videoId}}
      playerVars:       {
        autoplay        : 0, //
        cc_load_policy  : 1, // (show closed captions)
        controls        : 2, // (or 0 to not show them in the player)
        disablekb       : 0, // (1 to disable keyboard support)
        enablejsapi     : 1, // (to enable js api)
        // end                : 10, // (e.g. stop video at second 10)
        // start              : 2,  // ...
        fs              : 0, // (0 prevents, 1 allows fullscreen button)
        iv_load_policy  : 3, // (doesnt show video annotations)
        // // list + listType // (see API description)
        loop            : 0, // (do not loop the video when it finishes)
        modestbranding  : 1, // (remove some branding)
        // origin          : 'http://requirebin.com', // (CSP)
        // // playlist        : [VIDEO_IDs], // (to make up a dynamic playlist)
        rel             : 0  // (to not show related videos at the end)
        // showinfo        : 0, // (not show stuff like title, etc..)
        // hl              : 'en', // language
        // playsinline     : 0, // (play inline or fullscreen)
      },
      events: {
      }
    })
    var oldAddEventListener = playerAPI.addEventListener
    var oldRemoveEventListener = playerAPI.removeEventListener
    var cbs = { }
    playerAPI.addEventListener = function (name, cb) {
      if (name === 'onSecondChange') {
        cbs.onSecondChange = cbs.onSecondChange || []
        cbs.onSecondChange.push(cb)
      } else {
        oldAddEventListener.apply(playerAPI, arguments)
      }
    }
    var oldSec
    var secondsListener = setInterval(function () {
      var state = playerAPI.getPlayerState()
      if (state === YT.PlayerState.PLAYING) {
        var sec = playerAPI.getCurrentTime()
        console.log(oldSec, Math.floor(sec))
        if (oldSec !== Math.floor(sec)) {
          oldSec = Math.floor(sec)
          console.log(oldSec, Math.floor(sec))
          ;(cbs.onSecondChange||[]).forEach(function (cb) { cb(sec) })
        }
      }
    },1000)
    playerAPI.removeEventListener = function (cb) {
      if (name === 'onSecondChange') {
        cbs.onSecondChange = cbs.onSecondChange || []
        var i = cbs.onSecondChange.indexOf(cb)
        if (~i) cbs.onSecondChange.splice(i,1)
      } else {
        oldRemoveEventListener.apply(playerAPI, arguments)
      }
    }
    playerAPI.addEventListener('onReady', function (event) {
      playerAPI.addEventListener('onStateChange', function (event) {
        if (event.data === YT.PlayerState.ENDED) {
          setTimeout(cleanUp,0)
        }
      })
      callback(event.target, YT.PlayerState)
    })
    function cleanUp () {
      console.log('=== CLEAN UP === ')
      cbs = { }
      clearInterval(secondsListener)
      playerAPI.destroy()
      playerAPI = undefined
    }
  }
}
