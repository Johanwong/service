'use strict'
/******************************************************************************
//   DEPENDENCIES = CUSTOM SDK [Custom Software Development Kit]
// ******************************************************************************/
// var levelup = require('levelup');
// var leveljs = require('level-js');
// // var version = require('level-version');
// // // a version stream for a single key between versions 100 and 1000
// // db.createVersionStream(key, {minVersion: 100, maxVersion: 1000}).pipe(/* ... */)
// //
// // // stream all keys, but only the most recent version of each
// // db.createReadStream({versionLimit: 1}).pipe(/* ... */)
// /******************************************************************************
//   PARAMETER = ARGUMENT
// ******************************************************************************/
//   // no cli tool
// /******************************************************************************
//   MODE
// ******************************************************************************/
//   // just browser
// /******************************************************************************
//   MODULE INTERNALS & HELPERS
// ******************************************************************************/
// var DBname  = location.host;
// var db      = levelup(DBname, { db: leveljs });
// // var origin      = levelup(DBname, { db: leveljs });
// // var db      = version(origin);
// var logErr  = console.error.bind(console);
// var logInfo = console.info.bind(console);
//

const level       = require('level-browserify')
// const level       = require('memdb')
const sub         = require('level-sublevel')
// @TODO: add level-switchboard && level-subtrack
// @TODO: every "PUT" should add stacktrace filename+linenumber of who wrote an event/entry into the db
// const tracker     = require('level-subtrack')
// @TODO: add virtualDown?
// const package     = require('findup-package-json').sync({
//   // @TODO: add esova package json info to leveldb
//   fields: ['name', 'version']
// })
// add to package.json => "findup-package-json",


// @TODO: what to do if multiple tabs are open?
// => REQUEST is not even:
//    openRequest.onblocked = function () {debugger; console.log(arguments)}
// ...but it just HANGS until the already open tab is closed
/******************************************************************************
  CUSTOM
******************************************************************************/
// const version     = package.pkg.version
// const name        = package.pkg.name
// const NAME        = '/' + name + '/' + version + '/'
const NAME        = 'data.db'
var DB            = undefined
var APP           = undefined
var SDB           = undefined
// var opts          = { encoding: 'json' }
// @TODO: fix encoding to be able to store JAVASCRIPT VALUES (e.g. objects)
level(NAME/*, opts*/, function (err, db) {
  if (err) throw err
  DB = db
  SDB = db //sub(db) // @TODO: fix
  if (APP) APP()
})

// @TODO: ADD HOOKS
// https://www.npmjs.com/package/level-hooks

// @TODO: CHECK CONDITIONS
// https://www.npmjs.com/package/level-condition

/******************************************************************************
  MAIN
******************************************************************************/
module.exports  = db

function db (/*batch,*/opts, appCallback) {
  // "opts" allows to configure how db will react upon
  // INPUT and/or OUTPUT - when receiving key/value from external sources
  // or .pipe(sinks) wants the db to flush key/value pairs to an output
  if (APP) throw new Error('already initialized')
  APP = function start () {
    // populateDB(batch, opts, function callback (error) {
    //   if (error) appCallback(error)
    //   else appCallback(null, SDB)
    // })
    appCallback(null, SDB)
  }
  if (SDB) APP()
}
/******************************************************************************
  HELPER - populateDB
******************************************************************************/
function populateDB (batch, opts, callback) {
  try { localStorage.clear() }
  catch (e) { return callback(e) }
  DB.close(function (error) {
    if (error) return callback(error)
    setTimeout(function () {
      var req = indexedDB.deleteDatabase('IDBWrapper-'+NAME)
      req.onblocked = callback
      req.onerror = callback
      req.onsuccess = function (event) {
        DB.open(function (error) {
          if (error) return callback(error)
          // opts.force === true // OVERWRITE
          // @TODO: how to do this nicely?
          // opts.testKeys // if they exist, don't overwrite?
          // test for all keys whether they exist or not and if, dont overwrite
          DB.batch(batch, function (error) {
            if (error) callback(error)
            else setTimeout(callback, 0)
          })
        })
      }
    },0)
  })
}
