const ehs         = require('eventhandler-stream')
const { h, hsvg } = require('_h')
const s           = require('_s')

const vcs         = require('_vcs')
const skill       = require('_vcs/skilltree/skill')
const infobox     = require('_vcs/skilltree/infobox')

module.exports    = skilltree

function skilltree (db, engine) {
  const DATA = {
    title      : ''
    lesson     : []
  }
  var state$ = db.trackable()

  // DOM EVENT SOURCES
  var ehsA$ = ehs()
  var ehsB$ = ehs()
  var ehsC$ = ehs()

  // DB EVENT SOURCES
  var lesson$    = db.source('lesson')  // db.get(...) stream
  var dbSourceB$ = db.source()          // db.get(...) stream
  var dbSourceC$ = db.source()          // db.get(...) stream

  lesson$.pipe()

  // DB EVENT SINKS
  var dbSinkA$ = db.sink() // accepts db.del/batch/put(...) stream
  var dbSinkB$ = db.sink() // accepts db.del/batch/put(...) stream
  var dbSinkC$ = db.sink() // accepts db.del/batch/put(...) stream

  const CHILDREN = {
    skills         : []
  }
  var skilltree$ = vcs(function template (chunk, encoding, next) {
    if (isArray(DATA[chunk.key])) { DATA[chunk.key].push(chunk.value) }
    else                          { DATA[chunk.key] = chunk.value     }
    this.push(template())
    function template () {
      return h('div', [
        h('h1', DATA['title']),
        h('div.skilltree', layout(skills)),
        h('div.skillbox', [
          skillbox$
        ])
      ])
    }
  })



// createReadStream(options)
//
// 'gt' (greater than)
// 'gte' (='start')(greater than or equal) define the lower bound of the range
//
// 'lt' (less than)
// 'lte' (='end')(less than or equal) define the higher bound of the range

  state$.track(DATA)

  state$.sink()

  ehsA$.pipe()
  ehsB$.pipe()
  ehsC$.pipe()

  return skilltree$
}

// var AddressComponent = require('./AddressComponent.js')
//
// function CardComponent (db) { // INTERMEDIATE COMPONENT
//   var DATA = {
//     name     : 'John Doe',
//     subname  : 'alleycat',
//     info     : 'The random dude',
//     addresses: []
//   }
//   var state$ = db.trackable()
//   state$.track(DATA) // @TODO: fix
//   // https://github.com/serapath/level-tracker/blob/master/index.js
//
//   var address$ = AddressComponent(db.sub('address'))
//   address$.pipe(engine$)
//
//   var card$ = vcs(function template (chunk, encoding, next) {
//     DATA[chunk.key].push(chunk.value)
//     this.push(h('div', [
//       h('h1', 'Name: ' + DATA['name']),
//       h('h2', 'Subname: ' + DATA['subname']),
//       h('h3', 'Info: ' + DATA['info']),
//       address$
//       // ..... @TODO: stuff
//       // 1. how to get "address$" and more addresses in here?
//       // 2. what to store in DATA.addresses
//       // 3. how does it to relate to address$ internal DATA.???
//     ]))
//     next()
//   })
//
//   return state$.pipe(card$)
// }
